plugins {
    id "com.android.application"
    id "kotlin-android"
}

android {
    packagingOptions {
        resources {
            pickFirsts += ['META-INF/INDEX.LIST']
        }
	
        exclude 'lib/*/libnative-imagetranscoder.so'
        exclude 'lib/*/libnative-filters.so'
    }

    signingConfigs {
        rosa {
            storeFile file("..\\rosa.jks")
            storePassword "$warosa_storePassword"
            keyPassword "$warosa_keyPassword"
            keyAlias "$warosa_keyAlias"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    //the compression of webp file during build causes problem with FileDescriptor in ContentProvider.
    aaptOptions {
        noCompress "webp"
    }

    namespace "com.example.samplestickerapp"
    compileSdk 33
    
    defaultConfig {
        applicationId "online.rextorres.whatsapp.rosa"
        minSdk 23
        targetSdk 33
        versionCode 1
        versionName "1.0"

        signingConfig signingConfigs.rosa

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
	
        def contentProviderAuthority = applicationId + ".stickercontentprovider"
	
        // Creates a placeholder property to use in the manifest.
        manifestPlaceholders = [contentProviderAuthority: contentProviderAuthority]
	
        // Adds a new field for the authority to the BuildConfig class.
        buildConfigField("String", "CONTENT_PROVIDER_AUTHORITY", "\"${contentProviderAuthority}\"")
    }

    buildTypes {
        debug {
            minifyEnabled false
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules-release.pro", "proguard-rules.pro"
        }
    }

    compileOptions {
        sourceCompatibility "17"
        targetCompatibility "17"
    }

    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    }

    buildFeatures {
        buildConfig true
    }
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    def fresco_version = '3.0.0'
    implementation "com.facebook.fresco:fresco:$fresco_version"
    implementation "com.facebook.fresco:webpsupport:$fresco_version"
    implementation "com.facebook.fresco:animated-webp:$fresco_version"
    implementation "com.facebook.fresco:animated-base:$fresco_version"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

tasks.register('checkDebug') {
    def appId = android.defaultConfig.applicationId
    println("checkDebug: appId = $appId")

    def localProps = project.rootProject.file('local.properties')
    println("checkDebug: localProps = $localProps")

    doLast {
        println("checkDebug")

        if (appId.startsWith("com.whatsapp")) {
            throw new GradleException("applicationId in defaultConfig cannot start with com.whatsapp, please change your applicationId in app/build.gradle")
        }

        Properties properties = new Properties()
        properties.load(localProps.newDataInputStream())

        def ignoreApplicationIdCheck = properties.getProperty('ignoreApplicationIdCheck')

        if (ignoreApplicationIdCheck == null) {
            if (appId == "com.example.samplestickerapp") {
                throw new GradleException("Your applicationId is currently com.example.samplestickerapp, please change your applicationId to a different string in app/build.gradle in line 10")
            }
        } else {
            println("application id check ignored")
        }
    }
}

tasks.register('checkRelease') {
    def appId = android.defaultConfig.applicationId
    println("checkRelease: appId = $appId")

    doLast {
        println("checkRelease")

        if (appId.startsWith("com.example")) {
            throw new GradleException("applicationId in defaultConfig cannot start with com.example, please change your applicationId in app/build.gradle")
        }
    }
}

tasks.configureEach { task ->
    println(task.name)

    if (task.name.contains("assembleDebug")) {
        task.dependsOn checkDebug
    }

    if (task.name.contains("assembleRelease")) {
        task.dependsOn checkRelease
    }
}
